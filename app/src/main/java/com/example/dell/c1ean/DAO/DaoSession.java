package com.example.dell.c1ean.DAO;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.example.dell.c1ean.Bean.Company;
import com.example.dell.c1ean.Bean.CompanyActivity;
import com.example.dell.c1ean.Bean.Order;
import com.example.dell.c1ean.Bean.OrderPayment;
import com.example.dell.c1ean.Bean.User;
import com.example.dell.c1ean.Bean.UserInaccount;
import com.example.dell.c1ean.Bean.UserOutaccount;
import com.example.dell.c1ean.Bean.Worker;
import com.example.dell.c1ean.Bean.WorkerTimeTable;
import com.example.dell.c1ean.Bean.UserWallet;
import com.example.dell.c1ean.Bean.CompanyInaccount;
import com.example.dell.c1ean.Bean.WokerInaccount;
import com.example.dell.c1ean.Bean.UserAttend;

import com.example.dell.c1ean.DAO.CompanyDao;
import com.example.dell.c1ean.DAO.CompanyActivityDao;
import com.example.dell.c1ean.DAO.OrderDao;
import com.example.dell.c1ean.DAO.OrderPaymentDao;
import com.example.dell.c1ean.DAO.UserDao;
import com.example.dell.c1ean.DAO.UserInaccountDao;
import com.example.dell.c1ean.DAO.UserOutaccountDao;
import com.example.dell.c1ean.DAO.WorkerDao;
import com.example.dell.c1ean.DAO.WorkerTimeTableDao;
import com.example.dell.c1ean.DAO.UserWalletDao;
import com.example.dell.c1ean.DAO.CompanyInaccountDao;
import com.example.dell.c1ean.DAO.WokerInaccountDao;
import com.example.dell.c1ean.DAO.UserAttendDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig companyDaoConfig;
    private final DaoConfig companyActivityDaoConfig;
    private final DaoConfig orderDaoConfig;
    private final DaoConfig orderPaymentDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig userInaccountDaoConfig;
    private final DaoConfig userOutaccountDaoConfig;
    private final DaoConfig workerDaoConfig;
    private final DaoConfig workerTimeTableDaoConfig;
    private final DaoConfig userWalletDaoConfig;
    private final DaoConfig companyInaccountDaoConfig;
    private final DaoConfig wokerInaccountDaoConfig;
    private final DaoConfig userAttendDaoConfig;

    private final CompanyDao companyDao;
    private final CompanyActivityDao companyActivityDao;
    private final OrderDao orderDao;
    private final OrderPaymentDao orderPaymentDao;
    private final UserDao userDao;
    private final UserInaccountDao userInaccountDao;
    private final UserOutaccountDao userOutaccountDao;
    private final WorkerDao workerDao;
    private final WorkerTimeTableDao workerTimeTableDao;
    private final UserWalletDao userWalletDao;
    private final CompanyInaccountDao companyInaccountDao;
    private final WokerInaccountDao wokerInaccountDao;
    private final UserAttendDao userAttendDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        companyDaoConfig = daoConfigMap.get(CompanyDao.class).clone();
        companyDaoConfig.initIdentityScope(type);

        companyActivityDaoConfig = daoConfigMap.get(CompanyActivityDao.class).clone();
        companyActivityDaoConfig.initIdentityScope(type);

        orderDaoConfig = daoConfigMap.get(OrderDao.class).clone();
        orderDaoConfig.initIdentityScope(type);

        orderPaymentDaoConfig = daoConfigMap.get(OrderPaymentDao.class).clone();
        orderPaymentDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        userInaccountDaoConfig = daoConfigMap.get(UserInaccountDao.class).clone();
        userInaccountDaoConfig.initIdentityScope(type);

        userOutaccountDaoConfig = daoConfigMap.get(UserOutaccountDao.class).clone();
        userOutaccountDaoConfig.initIdentityScope(type);

        workerDaoConfig = daoConfigMap.get(WorkerDao.class).clone();
        workerDaoConfig.initIdentityScope(type);

        workerTimeTableDaoConfig = daoConfigMap.get(WorkerTimeTableDao.class).clone();
        workerTimeTableDaoConfig.initIdentityScope(type);

        userWalletDaoConfig = daoConfigMap.get(UserWalletDao.class).clone();
        userWalletDaoConfig.initIdentityScope(type);

        companyInaccountDaoConfig = daoConfigMap.get(CompanyInaccountDao.class).clone();
        companyInaccountDaoConfig.initIdentityScope(type);

        wokerInaccountDaoConfig = daoConfigMap.get(WokerInaccountDao.class).clone();
        wokerInaccountDaoConfig.initIdentityScope(type);

        userAttendDaoConfig = daoConfigMap.get(UserAttendDao.class).clone();
        userAttendDaoConfig.initIdentityScope(type);

        companyDao = new CompanyDao(companyDaoConfig, this);
        companyActivityDao = new CompanyActivityDao(companyActivityDaoConfig, this);
        orderDao = new OrderDao(orderDaoConfig, this);
        orderPaymentDao = new OrderPaymentDao(orderPaymentDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        userInaccountDao = new UserInaccountDao(userInaccountDaoConfig, this);
        userOutaccountDao = new UserOutaccountDao(userOutaccountDaoConfig, this);
        workerDao = new WorkerDao(workerDaoConfig, this);
        workerTimeTableDao = new WorkerTimeTableDao(workerTimeTableDaoConfig, this);
        userWalletDao = new UserWalletDao(userWalletDaoConfig, this);
        companyInaccountDao = new CompanyInaccountDao(companyInaccountDaoConfig, this);
        wokerInaccountDao = new WokerInaccountDao(wokerInaccountDaoConfig, this);
        userAttendDao = new UserAttendDao(userAttendDaoConfig, this);

        registerDao(Company.class, companyDao);
        registerDao(CompanyActivity.class, companyActivityDao);
        registerDao(Order.class, orderDao);
        registerDao(OrderPayment.class, orderPaymentDao);
        registerDao(User.class, userDao);
        registerDao(UserInaccount.class, userInaccountDao);
        registerDao(UserOutaccount.class, userOutaccountDao);
        registerDao(Worker.class, workerDao);
        registerDao(WorkerTimeTable.class, workerTimeTableDao);
        registerDao(UserWallet.class, userWalletDao);
        registerDao(CompanyInaccount.class, companyInaccountDao);
        registerDao(WokerInaccount.class, wokerInaccountDao);
        registerDao(UserAttend.class, userAttendDao);
    }
    
    public void clear() {
        companyDaoConfig.clearIdentityScope();
        companyActivityDaoConfig.clearIdentityScope();
        orderDaoConfig.clearIdentityScope();
        orderPaymentDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
        userInaccountDaoConfig.clearIdentityScope();
        userOutaccountDaoConfig.clearIdentityScope();
        workerDaoConfig.clearIdentityScope();
        workerTimeTableDaoConfig.clearIdentityScope();
        userWalletDaoConfig.clearIdentityScope();
        companyInaccountDaoConfig.clearIdentityScope();
        wokerInaccountDaoConfig.clearIdentityScope();
        userAttendDaoConfig.clearIdentityScope();
    }

    public CompanyDao getCompanyDao() {
        return companyDao;
    }

    public CompanyActivityDao getCompanyActivityDao() {
        return companyActivityDao;
    }

    public OrderDao getOrderDao() {
        return orderDao;
    }

    public OrderPaymentDao getOrderPaymentDao() {
        return orderPaymentDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public UserInaccountDao getUserInaccountDao() {
        return userInaccountDao;
    }

    public UserOutaccountDao getUserOutaccountDao() {
        return userOutaccountDao;
    }

    public WorkerDao getWorkerDao() {
        return workerDao;
    }

    public WorkerTimeTableDao getWorkerTimeTableDao() {
        return workerTimeTableDao;
    }

    public UserWalletDao getUserWalletDao() {
        return userWalletDao;
    }

    public CompanyInaccountDao getCompanyInaccountDao() {
        return companyInaccountDao;
    }

    public WokerInaccountDao getWokerInaccountDao() {
        return wokerInaccountDao;
    }

    public UserAttendDao getUserAttendDao() {
        return userAttendDao;
    }

}
