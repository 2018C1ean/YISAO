package com.example.dell.c1ean.DAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dell.c1ean.Bean.CompanyInaccount;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPANY_INACCOUNT".
*/
public class CompanyInaccountDao extends AbstractDao<CompanyInaccount, Long> {

    public static final String TABLENAME = "COMPANY_INACCOUNT";

    /**
     * Properties of entity CompanyInaccount.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Company_id = new Property(1, Long.class, "company_id", false, "COMPANY_ID");
        public final static Property Time = new Property(2, String.class, "time", false, "TIME");
        public final static Property Money = new Property(3, float.class, "money", false, "MONEY");
        public final static Property Payer = new Property(4, String.class, "Payer", false, "PAYER");
    }


    public CompanyInaccountDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyInaccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPANY_INACCOUNT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COMPANY_ID\" INTEGER," + // 1: company_id
                "\"TIME\" TEXT NOT NULL ," + // 2: time
                "\"MONEY\" REAL NOT NULL ," + // 3: money
                "\"PAYER\" TEXT NOT NULL );"); // 4: Payer
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPANY_INACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CompanyInaccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindLong(2, company_id);
        }
        stmt.bindString(3, entity.getTime());
        stmt.bindDouble(4, entity.getMoney());
        stmt.bindString(5, entity.getPayer());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CompanyInaccount entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindLong(2, company_id);
        }
        stmt.bindString(3, entity.getTime());
        stmt.bindDouble(4, entity.getMoney());
        stmt.bindString(5, entity.getPayer());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CompanyInaccount readEntity(Cursor cursor, int offset) {
        CompanyInaccount entity = new CompanyInaccount( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // company_id
            cursor.getString(offset + 2), // time
            cursor.getFloat(offset + 3), // money
            cursor.getString(offset + 4) // Payer
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CompanyInaccount entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCompany_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTime(cursor.getString(offset + 2));
        entity.setMoney(cursor.getFloat(offset + 3));
        entity.setPayer(cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CompanyInaccount entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CompanyInaccount entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CompanyInaccount entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
