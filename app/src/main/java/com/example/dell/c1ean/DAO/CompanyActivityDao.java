package com.example.dell.c1ean.DAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.dell.c1ean.Bean.CompanyActivity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPANY_ACTIVITY".
*/
public class CompanyActivityDao extends AbstractDao<CompanyActivity, Long> {

    public static final String TABLENAME = "COMPANY_ACTIVITY";

    /**
     * Properties of entity CompanyActivity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Img1 = new Property(3, String.class, "img1", false, "IMG1");
        public final static Property Img2 = new Property(4, String.class, "img2", false, "IMG2");
        public final static Property Img3 = new Property(5, String.class, "img3", false, "IMG3");
        public final static Property Unit = new Property(6, String.class, "unit", false, "UNIT");
        public final static Property Start_time = new Property(7, String.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(8, String.class, "end_time", false, "END_TIME");
        public final static Property Price = new Property(9, float.class, "price", false, "PRICE");
        public final static Property Company_id = new Property(10, long.class, "company_id", false, "COMPANY_ID");
        public final static Property Uses = new Property(11, String.class, "uses", false, "USES");
        public final static Property Activity_decribes = new Property(12, String.class, "activity_decribes", false, "ACTIVITY_DECRIBES");
    }


    public CompanyActivityDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyActivityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPANY_ACTIVITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"TYPE\" TEXT NOT NULL ," + // 2: type
                "\"IMG1\" TEXT NOT NULL ," + // 3: img1
                "\"IMG2\" TEXT," + // 4: img2
                "\"IMG3\" TEXT," + // 5: img3
                "\"UNIT\" TEXT," + // 6: unit
                "\"START_TIME\" TEXT NOT NULL ," + // 7: start_time
                "\"END_TIME\" TEXT NOT NULL ," + // 8: end_time
                "\"PRICE\" REAL NOT NULL ," + // 9: price
                "\"COMPANY_ID\" INTEGER NOT NULL ," + // 10: company_id
                "\"USES\" TEXT NOT NULL ," + // 11: uses
                "\"ACTIVITY_DECRIBES\" TEXT NOT NULL );"); // 12: activity_decribes
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPANY_ACTIVITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CompanyActivity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getType());
        stmt.bindString(4, entity.getImg1());
 
        String img2 = entity.getImg2();
        if (img2 != null) {
            stmt.bindString(5, img2);
        }
 
        String img3 = entity.getImg3();
        if (img3 != null) {
            stmt.bindString(6, img3);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(7, unit);
        }
        stmt.bindString(8, entity.getStart_time());
        stmt.bindString(9, entity.getEnd_time());
        stmt.bindDouble(10, entity.getPrice());
        stmt.bindLong(11, entity.getCompany_id());
        stmt.bindString(12, entity.getUses());
        stmt.bindString(13, entity.getActivity_decribes());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CompanyActivity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getType());
        stmt.bindString(4, entity.getImg1());
 
        String img2 = entity.getImg2();
        if (img2 != null) {
            stmt.bindString(5, img2);
        }
 
        String img3 = entity.getImg3();
        if (img3 != null) {
            stmt.bindString(6, img3);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(7, unit);
        }
        stmt.bindString(8, entity.getStart_time());
        stmt.bindString(9, entity.getEnd_time());
        stmt.bindDouble(10, entity.getPrice());
        stmt.bindLong(11, entity.getCompany_id());
        stmt.bindString(12, entity.getUses());
        stmt.bindString(13, entity.getActivity_decribes());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CompanyActivity readEntity(Cursor cursor, int offset) {
        CompanyActivity entity = new CompanyActivity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // type
            cursor.getString(offset + 3), // img1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // img2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // img3
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // unit
            cursor.getString(offset + 7), // start_time
            cursor.getString(offset + 8), // end_time
            cursor.getFloat(offset + 9), // price
            cursor.getLong(offset + 10), // company_id
            cursor.getString(offset + 11), // uses
            cursor.getString(offset + 12) // activity_decribes
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CompanyActivity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setType(cursor.getString(offset + 2));
        entity.setImg1(cursor.getString(offset + 3));
        entity.setImg2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImg3(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStart_time(cursor.getString(offset + 7));
        entity.setEnd_time(cursor.getString(offset + 8));
        entity.setPrice(cursor.getFloat(offset + 9));
        entity.setCompany_id(cursor.getLong(offset + 10));
        entity.setUses(cursor.getString(offset + 11));
        entity.setActivity_decribes(cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CompanyActivity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CompanyActivity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CompanyActivity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
